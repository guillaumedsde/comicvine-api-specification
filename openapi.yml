openapi: 3.0.3
info:
  description: OpenAPI specification for the ComicVine API
  version: "1.0"
  title: ComicVine API
externalDocs:
  description: Official Documentation
  url: "https://comicvine.gamespot.com/api/documentation"
servers:
  - url: "https://comicvine.gamespot.com/api"
    description: Official Production server
paths:
  # TODO
  #  /character:
  # TODO
  #  /characters:
  # TODO
  #  /chat:
  # TODO
  #  /chats:
  # TODO
  #  /concept:
  # TODO
  #  /concepts:
  # TODO
  #  /episode:
  # TODO
  #  /episodes:
  # TODO
  /issue/{id}:
    get:
      summary: Get a particular issue
      operationId: get_issue
      parameters:
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/field_list"
      responses:
        "200":
          description: Information about the issue
          content:
            application/json:
              schema:
                $ref: ./schemas/response.yml
            application/xml:
              schema:
                $ref: ./schemas/response.yml
  # TODO
  #  /issues:
  # TODO
  #  /location:
  # TODO
  #  /locations:
  # TODO
  #  /movie:
  # TODO
  #  /movies:
  # TODO
  #  /object:
  # TODO
  #  /objects:
  # TODO
  #  /origin:
  # TODO
  #  /origins:
  # TODO
  /person/{id}:
    get:
      summary: Get a particular person
      operationId: get_person
      parameters:
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/field_list"
      responses:
        "200":
          description: Information about the person
          content:
            application/json:
              schema:
                $ref: ./schemas/response.yml
            application/xml:
              schema:
                $ref: ./schemas/response.yml
  # TODO
  #  /people:
  # TODO
  #  /power:
  # TODO
  #  /powers:
  # TODO
  #  /promo:
  # TODO
  #  /promos:
  # TODO
  #  /publisher:
  # TODO
  #  /publishers:
  # TODO
  #  /series:
  # TODO
  #  /series_list:
  # TODO
  /search:
    get:
      summary: Search to ComicVine database
      operationId: search
      parameters:
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/field_list"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/resources"
      responses:
        "200":
          description: Search Results
          content:
            application/json:
              schema:
                $ref: ./schemas/response.yml
            application/xml:
              schema:
                $ref: ./schemas/response.yml
  # TODO
  #  /story_arc:
  # TODO
  #  /story_arcs:
  # TODO
  #  /team:
  # TODO
  #  /teams:
  # TODO
  #  /types:
  # TODO
  #  /video:
  # TODO
  #  /videos:
  # TODO
  #  /video_type:
  # TODO
  #  /video_types:
  # TODO
  #  /video_category:
  # TODO
  #  /video_categories:
  # TODO
  /volume/{id}:
    get:
      summary: Get a particular volume
      operationId: get_volume
      parameters:
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/field_list"
      responses:
        "200":
          description: Information about the volume
          content:
            application/json:
              schema:
                $ref: ./schemas/response.yml
            application/xml:
              schema:
                $ref: ./schemas/response.yml
  # TODO
  #  /volumes
components:
  parameters:
    format:
      in: query
      name: format
      schema:
        type: string
        default: xml
        enum:
          - xml
          - json
          - jsonp
      example: json
      description: "The data format of the response takes either xml, json, or jsonp."
    query:
      in: query
      name: query
      schema:
        type: string
      example: Yoko Tsuno
      description: The search string.
    field_list:
      in: query
      name: field_list
      schema:
        type: string
      example: "id,birth,description"
      description: 'List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a ","'
    limit:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        default: 100
        minimum: 0
        maximum: 100
      example: 100
      description: The number of results to display per page. This value defaults to 100 and can not exceed this number.
    offset:
      in: query
      name: offset
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 200
      description: Return results starting with the object at the offset specified.
    sort:
      in: query
      name: sort
      schema:
        type: string
        pattern: "^[a-z_]*:(asc|desc)$"
      example: "birth:asc"
      description: "The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc."
    filter:
      in: query
      name: filter
      schema:
        type: string
        pattern: "^([a-z_]+:[^,]+(,|$))+$"
      example: "gender:Female,name:Yoko Tsuno"
      description: |
        The result can be filtered by the marked fields in the Fields section below.
          Single filter: &filter=field:value
          Multiple filters: &filter=field:value,field:value
          Date filters: &filter=field:start value|end value (using datetime format)
    resources:
      in: query
      name: resources
      schema:
        type: string
        pattern: "^([a-z_]+(,|$))+$"
      example: character,volume
      description: |
        List of resources to filter results. This filter can accept multiple arguments, each delimited with a ",". Available options are:
          character
          concept
          origin
          object
          location
          issue
          story_arc
          volume
          publisher
          person
          team
          video
    id:
      in: path
      name: id
      required: true
      description: Unique ID of the entity.
      schema:
        type: string
      example: "4050-87668"
  schemas:
    response:
      $ref: ./schemas/response.yml
    volume:
      $ref: ./schemas/volume.yml
    issue:
      $ref: ./schemas/issue.yml
    person:
      $ref: ./schemas/person.yml

  # Authentication Mechanisms
  securitySchemes:
    # Define API Key Authentication
    api_key:
      name: api_key
      type: apiKey
      in: query
      description: |
        # API Key

        Your ComicVine API key, required for access to any of the API's resources.
        You can get your own API Key on the [ComicVine API info page](https://comicvine.gamespot.com/api/)

        ## Format

        It is 40 characters long with containing only lowercase characters along with numbers.
          example: 4ddon0bxepyyb19iz6m54mtucqm83bsj6fn9othx
          regex pattern: `^[a-z0-9]*$`

# Use API Key Authentication globally
security:
  - api_key: []
